require('dotenv').config(); // Load environment variables
const express = require("express");
const mongoose = require("mongoose");
const Razorpay = require("razorpay");
const cors = require("cors"); // Import CORS
const bcrypt = require('bcryptjs'); // For password hashing
const jwt = require('jsonwebtoken'); // For JWT
const { spawn } = require('child_process'); // For opening PuTTY

const app = express();

// Enable CORS for all origins
app.use(cors());

// Middleware
app.use(express.json());

// MongoDB setup
const mongoURI = process.env.MONGO_URI || 'mongodb://localhost:27017/razorpayOrders';
mongoose
    .connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("Connected to MongoDB"))
    .catch((err) => console.error("MongoDB connection error:", err));

// MongoDB Schema for Razorpay order details
const orderSchema = new mongoose.Schema({
    order_id: String,
    amount: Number,
    currency: String,
    receipt: String,
    status: { type: String, default: "created" },
    created_at: { type: Date, default: Date.now },
    duration: Number,
    start_date: Date,
    end_date: Date,
    participant_name: String,
    quantity: Number,
    email: String, // Store email for sending the invoice
});

const Order = mongoose.model('Order', orderSchema); // Add this line to define the model

// Razorpay instance setup
const razorpay = new Razorpay({
    key_id:"", // Your Razorpay Key ID
    key_secret: "", // Your Razorpay Key Secret
});

// Razorpay order creation API
app.post("/api/orders/create", async (req, res) => {
    const { amount, currency, receipt, email } = req.body;

    try {
        const options = {
            amount: amount * 100, // Amount in the smallest currency unit
            currency,
            receipt,
        };

        const order = await razorpay.orders.create(options);

        const newOrder = new Order({
            order_id: order.id,
            amount: options.amount,
            currency: options.currency,
            receipt: options.receipt,
            email,
        });

        await newOrder.save();
        res.json({ order, newOrder });
    } catch (error) {
        console.error("Razorpay order creation error:", error);
        res.status(500).json({ message: "Failed to create Razorpay order." });
    }
});

// Razorpay payment success route
app.post("/api/orders/success", async (req, res) => {
    const { order_id } = req.body;

    try {
        const order = await Order.findOne({ order_id });
        if (!order) {
            return res.status(404).json({ message: "Order not found." });
        }

        order.status = "paid";
        await order.save();

        // Send confirmation (use email service if available)
        console.log(`Payment successful for order ${order_id}.`);
        res.json({ message: "Payment successful." });
    } catch (error) {
        console.error("Payment success error:", error);
        res.status(500).json({ message: "Failed to process payment success." });
    }
});

// API to open PuTTY
app.get("/api/open-putty", (req, res) => {
    const puttyPath = process.env.PUTTY_PATH || "C:\\Users\\CDAC\\Downloads\\putty.exe"; // Default PuTTY path

    try {
        const puttyProcess = spawn(puttyPath);

        puttyProcess.on("error", (err) => {
            console.error("Error launching PuTTY:", err);
            res.status(500).json({ error: "Failed to open PuTTY." });
        });

        puttyProcess.on("close", (code) => {
            console.log(`PuTTY process exited with code ${code}`);
            res.json({ message: "PuTTY opened successfully." });
        });
    } catch (error) {
        console.error("Unexpected error opening PuTTY:", error);
        res.status(500).json({ error: "Unexpected error occurred while opening PuTTY." });
    }
});

// Start the server
const port = process.env.PORT || 5000;
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});

const express = require('express');
const { spawn } = require('child_process');
const Razorpay = require('razorpay');
const cors = require('cors');
const mongoose = require('mongoose');

// Create a new instance of the express app
const app = express();

// Enable CORS for all routes
app.use(cors());

// Middleware to parse JSON bodies (express.json() is used here)
app.use(express.json());

// MongoDB setup
const mongoURI = 'mongodb://localhost:27017/razorpayOrders';
mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDB'))
    .catch((err) => console.error('MongoDB connection error:', err));

// Razorpay instance setup (replace with actual keys in production)
const razorpay = new Razorpay({
    key_id: 'rzp_test_1BkbvUiG6Er2NL',
    key_secret: 'pi4ejIUly0gSxV0YVTtpGNx2'
});

// MongoDB Schema for storing Razorpay order details
const orderSchema = new mongoose.Schema({
    order_id: String,
    amount: Number,
    currency: String,
    receipt: String,
    status: { type: String, default: 'created' },
    created_at: { type: Date, default: Date.now },
    duration: Number,
    start_date: Date,
    end_date: Date,
    participant_name: String,
    quantity: Number
});

// Create a Mongoose model from the schema
const Order = mongoose.model('Order', orderSchema);

// API endpoint to create a Razorpay order and save details in MongoDB
app.post('/orders', async (req, res) => {
    const { amount, currency, duration, start_date, participant_name, quantity } = req.body;

    console.log("Received participant_name:", participant_name);  // Debugging

    // Validate request body for required fields
    if (!amount || typeof amount !== 'number' || amount <= 0 || !duration || !start_date || !participant_name || !quantity) {
        console.error('Invalid or missing parameters');
        return res.status(400).json({ error: "Invalid or missing parameters" });
    }

    const options = {
        amount: amount * 100, // Convert to paise
        currency: currency || "INR",
        receipt: `receipt_${Date.now()}`,
        payment_capture: 1
    };

    try {
        console.log("Creating Razorpay order with options:", options);
        const response = await razorpay.orders.create(options);
        console.log("Razorpay order created:", response);

        // Calculate end_date based on start_date and duration
        const startDate = new Date(start_date);
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + duration);

        // Create order with all fields
        const newOrder = new Order({
            order_id: response.id,
            amount: response.amount / 100,
            currency: response.currency,
            receipt: response.receipt,
            duration,
            start_date: startDate,
            end_date: endDate,
            participant_name,
            quantity
        });

        await newOrder.save();
        console.log('New order saved:', newOrder);

        // Send order details as a response
        res.json({
            order_id: response.id,
            currency: response.currency,
            amount: response.amount
        });
    } catch (error) {
        console.error("Error creating Razorpay order:", error);

        if (error.response) {
            console.error("Razorpay API Error:", error.response.data);
            return res.status(error.response.status || 500).json({
                error: error.response.data.error_description || 'Failed to create Razorpay order. Please try again.'
            });
        } else {
            return res.status(500).json({ error: "Unexpected error occurred." });
        }
    }
});

// API endpoint for payment success
app.post('/payment/success', async (req, res) => {
    const { order_id, payment_id, participantName } = req.body;

    console.log(`Payment successful for participant ${participantName}. Order ID: ${order_id}, Payment ID: ${payment_id}`);

    try {
        const order = await Order.findOne({ order_id });

        if (!order) {
            return res.status(404).json({ error: 'Order not found' });
        }

        order.status = 'paid';
        await order.save();

        res.status(200).json({ message: 'Payment successful' });
    } catch (err) {
        console.error('Error handling payment:', err);
        res.status(500).json({ error: 'Payment handling failed' });
    }
});

// API endpoint for opening PuTTY
app.get('/api/open-putty', (req, res) => {
    const puttyPath = 'C:/Users/CDAC/Downloads/putty.exe'; // Make sure path is correct and uses forward slashes or double backslashes
    try {
        const putty = spawn(puttyPath);

        putty.on('error', (err) => {
            console.error('Error opening PuTTY:', err);
            return res.status(500).json({ error: 'Failed to open PuTTY' });
        });

        putty.on('close', (code) => {
            console.log(`PuTTY process exited with code ${code}`);
            return res.status(200).json({ message: 'PuTTY opened successfully' });
        });
    } catch (err) {
        console.error('Unexpected error:', err);
        return res.status(500).json({ error: 'Failed to execute PuTTY' });
    }
});

// Start the server
app.listen(5000, () => {
    console.log('Server is running on port 5000');
});

const express = require("express");
const { spawn } = require("child_process");
const Razorpay = require("razorpay");
const cors = require("cors");
const mongoose = require("mongoose");
const { Client } = require("ssh2");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB setup
const mongoURI = process.env.MONGO_URI || "mongodb://localhost:27017/razorpayOrders";
mongoose
    .connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log("Connected to MongoDB"))
    .catch((err) => console.error("MongoDB connection error:", err));

// Razorpay instance setup (replace with actual keys in production)
const razorpay = new Razorpay({
    key_id: process.env.RAZORPAY_KEY_ID || "rzp_test_1BkbvUiG6Er2NL",
    key_secret: process.env.RAZORPAY_KEY_SECRET || "pi4ejIUly0gSxV0YVTtpGNx2",
});

// MongoDB Schema for Razorpay order details
const orderSchema = new mongoose.Schema({
    order_id: String,
    amount: Number,
    currency: String,
    receipt: String,
    status: { type: String, default: "created" },
    created_at: { type: Date, default: Date.now },
    duration: Number,
    start_date: Date,
    end_date: Date,
    participant_name: String,
    quantity: Number,
});

const Order = mongoose.model("Order", orderSchema);

// Razorpay order creation API
app.post("/orders", async (req, res) => {
    const { amount, currency, duration, start_date, participant_name, quantity } = req.body;

    if (!amount || !duration || !start_date || !participant_name || !quantity) {
        return res.status(400).json({ error: "Invalid or missing parameters" });
    }

    const options = {
        amount: amount * 100, // Convert to paise
        currency: currency || "INR",
        receipt: `receipt_${Date.now()}`,
        payment_capture: 1,
    };

    try {
        const response = await razorpay.orders.create(options);

        const startDate = new Date(start_date);
        const endDate = new Date(startDate);
        endDate.setDate(startDate.getDate() + duration);

        const newOrder = new Order({
            order_id: response.id,
            amount: response.amount / 100,
            currency: response.currency,
            receipt: response.receipt,
            duration,
            start_date: startDate,
            end_date: endDate,
            participant_name,
            quantity,
        });

        await newOrder.save();

        res.json({
            order_id: response.id,
            currency: response.currency,
            amount: response.amount,
        });
    } catch (error) {
        console.error("Error creating Razorpay order:", error);
        res.status(500).json({ error: "Failed to create order. Please try again." });
    }
});

// Payment success API
app.post("/payment/success", async (req, res) => {
    const { order_id } = req.body;

    try {
        const order = await Order.findOne({ order_id });
        if (!order) {
            return res.status(404).json({ error: "Order not found." });
        }

        order.status = "paid";
        await order.save();

        res.json({ message: "Payment successful" });
    } catch (error) {
        console.error("Error processing payment:", error);
        res.status(500).json({ error: "Failed to process payment. Please try again." });
    }
});

// API to open PuTTY
app.get("/api/open-putty", (req, res) => {
    const puttyPath = process.env.PUTTY_PATH || "C:\\Users\\CDAC\\Downloads\\putty.exe"; // Update path if necessary

    try {
        const puttyProcess = spawn(puttyPath);

        puttyProcess.on("error", (err) => {
            console.error("Error launching PuTTY:", err);
            res.status(500).json({ error: "Failed to open PuTTY." });
        });

        puttyProcess.on("close", (code) => {
            console.log(`PuTTY process exited with code ${code}`);
            res.json({ message: "PuTTY opened successfully." });
        });
    } catch (error) {
        console.error("Unexpected error opening PuTTY:", error);
        res.status(500).json({ error: "Unexpected error occurred while opening PuTTY." });
    }
});

// SSH connection API
app.post("/ssh-connect", (req, res) => {
    const { host, port, username, privateKey, password } = req.body;

    const conn = new Client();
    conn
        .on("ready", () => {
            res.send("SSH Connection Successful!");
            conn.end(); // End the connection after successful login
        })
        .on("error", (err) => {
            console.error("Error with SSH connection:", err);
            res.status(500).send("SSH Connection Failed: " + err.message);
        })
        .connect({
            host,
            port: port || 22,
            username,
            privateKey: privateKey ? Buffer.from(privateKey, "base64") : undefined,
            password: password || undefined,
        });
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
